## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode
r = p * q:
    set r = 0
    {Inv: r = p_0*q_0 + p_0*q_1 + ... + p_0*q_(i-1) +
              p_1*q_0 + p_1*q_1 + ... + p_1*q_(i-1) +
              ...+
              p_(j-1)*q_0 + p_(j-1)*q_1 + ... + p_(j-1)*q_(i-1)
              where p_k is the kth term in p, and q_m is the mth term in q.}
    foreach term, t_p, in p:
        initialize a new polynomial newpoly= 0
        {Inv: newpoly = t_p*q0 + t_p*q1 + ... + t_p*q_(i-1)}
        foreach term, t_q, in q:
            multiply t_p and t_q, add the result into newpoly
        set r with the sum of newpoly and r(adding two polynomials)





2. Division Pseudocode
q = n / p :
    set q = 0 and r = n
    {Inv : n = p * q + r}
    while r is not 0 and the highest degree of r is greater or equal to the highest degree of p:
        newTerm = the leading term of r / leading term of p
        set q equals the sum of q and newTerm(newTerm is only one term which cannot be added to a
        polynomial, but here I treat newTerm as a polynomial with one term)
        set r equals r - ( newTerm* p)



3. Division Example: (x3+x-1) / (x+1) = x2-x+2
q = 0
n = x^3 + x - 1
r = x^3 + x - 1
p = x + 1
while loop:
    Iteration 1: q = 0, n = x^3 + x - 1, r = x^3 + x - 1, p = x + 1
    [r is not 0 and the highest degree of r is greater or equal to the highest degree of p]
    r = x^3 + x - 1, not equal to 0, and the highest degree of r is 3, which is larger than the
    highest degree of p, which is 1------enter loop
        [newTerm = the leading term of r / leading term of p] newTerm = x^3 / x = x^2
        [set q equals the sum of q and newTerm] q + newTerm = x^2, so q = x^2
        [set r equals r - ( newTerm* p)] newTerm *p = x^3 + x^2, r- newTerm * p = -x^2 + x -1,
        so r = -x^2 + x -1
    Iteration 2: q = x^2, n = x^3 + x - 1, r = -x^2 + x -1, p = x + 1
    [r is not 0 and the highest degree of r is greater or equal to the highest degree of p]
    r = -x^2 + x -1, not equal to 0, and the highest degree of r is 2, which is larger than
    the highest degree of p ,which is 1 -------enter the loop
        [newTerm = the leading term of r / leading term of p] newTerm =-x^2 / x = -x
        [set q equals the sum of q and newTerm]q + newTerm = x^2-x, so q = x^2-x
        [set r equals r - ( newTerm* p)] newTerm *p = -x^2 - x, r- newTerm * p = 2x - 1,
        so r = 2x -1
    Iteration 3: q = x^2 -x, n = x^3 + x - 1, r = 2x -1, p = x + 1
    [r is not 0 and the highest degree of r is greater or equal to the highest degree of p]
    r = 2x-1, not equal to 0, and the highest degree of r, which is 1, is equal to the
    highest degree of p, which is 1-----enter loop
        [newTerm = the leading term of r / leading term of p] newTerm =2x / x = 2
        [set q equals the sum of q and newTerm]q + newTerm = x^2 - x + 2, so q = x^2-x+2
        [set r equals r - ( newTerm* p)] newTerm *p = 2x+2, r- newTerm * p = -3, so r = -3
    Iteration 4: q = x^2 -x +2, n = x^3 + x - 1, r = -3, p = x + 1
    [r is not 0 and the highest degree of r is greater or equal to the highest degree of p]
    r = -3, not equal to 0, but the highest degree of r, which is 0, is smaller than the
    highest degree of p ,which is 1------exit loop
we are done! q = x^2 - x + 2




## Part 1
###########################################################################

1. Weakened Rep Invariant
public RatNum(int n, int d) will be different because there will be common factors between
denom and numer.
e.g.if n = 6 and d = 8 are passed, it used to be 3/4, but now it is 6/8
Disadvantage: decrease efficiency. e.g. before it changes,
the only number that represents 0.75 is 3/4, but after it changes, there are infinitely
many numbers that can represent
0.75, e.g. 3/4, 6/8, 9/12...

public RatNum add(RatNum arg): there will be common factors in the result.
e.g.if 1/4 + 1/4, it used to be 1/2, but now it is 2/4.
disadvantage: it is not efficient to check whether it is correct.

public RatNum sub(RatNum arg): the same as add method because in the sub method,
it uses add method.

public RatNum mul(RatNum arg): there will be common factors in the result.
e.g. 1/2 * 2/3, it used to be 1/3, but now it is 2/6.

public RatNum div(RatNum arg): there will be common factors in the result.
e.g. (3/2) / (1/2) it used to be 3, but now it is 6/2

public boolean equals(Object obj) need to be changed. For example, make two copies of
this and obj respectively,
int g = gcd(n, d);
n = n / g;
d = d / g;
use above three lines of code to make the copies into reduced form at the start of method.
disadvantage: we make two copies by constructing new object with the same n and d,
which is not efficient.



2. Alternate add, sub, mul, div
It fails to meet original specification of this method because there is no modifies in spec,
so this should not be changed.
It fails to meet specification of class, because there might be unreduced forms or denom
which is less than 0.
If we want to change spec, we can do e.g.
* modifies :this
* spec.effects: change this to this + obj //in add method,
                            to this - obj //in sub method,
                            to this * obj //in nul method,
                            to this / obj //in div method.


3. Constructor checkReps
Because <b>RatNum</b> represents an <b>immutable</b> rational number. Once it is constructed,
it will not be changed.
Even in add/sub/mul/div method, at the end of method it returns a new object,
which is equivalent to add a checkReps method.
checkReps at the end of constructor ensures that every object can fulfill the rep inv.



## Part 2
###########################################################################

1. Calls to checkRep in RatTerm
I only include checkRep at the end of constructor, because RatTerm class is immutable, and all
RatTerm that are constructed cannot be changed and cannot violate rep inv.


2. Weakened Rep Invariant



3. Alternate Rep Invariant



4. Preferred Invariants




## Part 3
###########################################################################

1. Calls to checkRep in RatPoly



2. Alternate Representation



