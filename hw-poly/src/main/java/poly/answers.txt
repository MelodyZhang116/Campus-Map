## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode
r = p * q:
    set r = 0
    {Inv: r = p_0*q_0 + p_0*q_1 + ... + p_0*q_(i-1) +
              p_1*q_0 + p_1*q_1 + ... + p_1*q_(i-1) +
              ...+
              p_(j-1)*q_0 + p_(j-1)*q_1 + ... + p_(j-1)*q_(i-1)
              where p has j terms, q has i terms,
              where p_k is the kth term in p, and q_m is the mth term in q.}
    foreach term, t_p, in p:
        foreach term, t_q, in q:
            r = r + t_p * t_q(adding two polynomials)





2. Division Pseudocode
q = n / p :
    set q = 0 and r = n
    {Inv : n = p * q + r}
    while r is not 0 and the highest degree of r is greater or equal to the highest degree of p:
        newTerm = the first term of r / first term of p
        make a new polynomial called single with only one term--newTerm
        set q equals the sum of q and single
        set r equals r - ( single* p)



3. Division Example: (x3+x-1) / (x+1) = x2-x+2
q = 0
n = x^3 + x - 1
r = x^3 + x - 1
p = x + 1
while loop:
    Iteration 1: q = 0, n = x^3 + x - 1, r = x^3 + x - 1, p = x + 1
    [r is not 0 and the highest degree of r is greater or equal to the highest degree of p]
    r = x^3 + x - 1, not equal to 0, and the highest degree of r is 3, which is larger than the
    highest degree of p, which is 1------enter loop
        [newTerm = the leading term of r / leading term of p] newTerm = x^3 / x = x^2
        [set q equals the sum of q and newTerm] q + newTerm = x^2, so q = x^2
        [set r equals r - ( newTerm* p)] newTerm *p = x^3 + x^2, r- newTerm * p = -x^2 + x -1,
        so r = -x^2 + x -1
    Iteration 2: q = x^2, n = x^3 + x - 1, r = -x^2 + x -1, p = x + 1
    [r is not 0 and the highest degree of r is greater or equal to the highest degree of p]
    r = -x^2 + x -1, not equal to 0, and the highest degree of r is 2, which is larger than
    the highest degree of p ,which is 1 -------enter the loop
        [newTerm = the leading term of r / leading term of p] newTerm =-x^2 / x = -x
        [set q equals the sum of q and newTerm]q + newTerm = x^2-x, so q = x^2-x
        [set r equals r - ( newTerm* p)] newTerm *p = -x^2 - x, r- newTerm * p = 2x - 1,
        so r = 2x -1
    Iteration 3: q = x^2 -x, n = x^3 + x - 1, r = 2x -1, p = x + 1
    [r is not 0 and the highest degree of r is greater or equal to the highest degree of p]
    r = 2x-1, not equal to 0, and the highest degree of r, which is 1, is equal to the
    highest degree of p, which is 1-----enter loop
        [newTerm = the leading term of r / leading term of p] newTerm =2x / x = 2
        [set q equals the sum of q and newTerm]q + newTerm = x^2 - x + 2, so q = x^2-x+2
        [set r equals r - ( newTerm* p)] newTerm *p = 2x+2, r- newTerm * p = -3, so r = -3
    Iteration 4: q = x^2 -x +2, n = x^3 + x - 1, r = -3, p = x + 1
    [r is not 0 and the highest degree of r is greater or equal to the highest degree of p]
    r = -3, not equal to 0, but the highest degree of r, which is 0, is smaller than the
    highest degree of p ,which is 1------exit loop
we are done! q = x^2 - x + 2




## Part 1
###########################################################################

1. Weakened Rep Invariant
public RatNum(int n, int d) will change. In particular,int g = gcd(n, d);n = n / g;d = d / g;
can be deleted.
advantage:less code in constructor, so it will be more efficient.

private void checkRep()will change, because the rep inv is changed. So the if(denom > 0){..}can be
deleted.
advantage: there are less things we need to check, so more efficient.

public boolean equals(Object obj) need to be changed. We should first reduce two objects to reduced form,
and then compare.
disadvantage: we have to create two object that are in reduced form, which is not efficient.

public String toString() should be changed. Since we are required to make sure that the output
is in reduced form, so we have to first reduce the common factor of denom and numer
using gcd method, and convert it into string.
disadvantage: we have to do more things than before, which is not efficient and not convenient.



2. Alternate add, sub, mul, div
It fails to meet the spec of the class because it says that "<b>RatNum</b> represents an
<b>immutable</b> rational number. ". After the change, it will be immutable.
It fails to meet original specification of this method because there is no modifies and effect
in spec, so this should not be changed.
It fails to meet specification of class, because there might be unreduced forms(in four methods)
 or denom which is less than 0(in div method).



3. Constructor checkReps
Because <b>RatNum</b> represents an <b>immutable</b> rational number. Once it is constructed,
it will not be changed.
Even in add/sub/mul/div method, at the end of method it returns a new object,
which is equivalent to add a checkRep method.
Also we did not call checkRep at the beginning of the constructor, because we allows clients to
input any thing including something that might violate the rep inv. So we write some lines of code
to fix it in order to meet the rep inv.



## Part 2
###########################################################################

1. Calls to checkRep in RatTerm
I only include checkRep at the end of constructor, because RatTerm class is immutable, and all
RatTerm that are constructed cannot be changed and cannot violate rep inv.


2. Weakened Rep Invariant
public RatTerm(RatNum c, int e) could change. It does not need to check c.equals(RatNum.ZERO),
and make expt=0.
advantage: more efficient. More quickly to construct a new object. Less conditions to check, which
make code clarity clearer.

public String toString()will change. We have to make the RatTerm with 0 coeff also have 0 expt at the beginning
of the mthod.
disadvantage: We have to check whether it is ZERO at the beginning, which is not efficient.

public boolean equals(Object obj) the code should change. We should first check if they are both ZERO,
then they should be treated as equal terms.
disadvantage: more checking and more conditions, less efficient.

private void checkRep() could be changed, because there are less to check. So we can delete
assert (!coeff.equals(RatNum.ZERO) || expt == 0) : "coeff is zero while expt == " + expt;
advantage: we have less conditions here, so it is more efficient.





3. Alternate Rep Invariant
public RatTerm(RatNum c, int e) its code should change. It should add another condition,
if(coeff.isNaN()){expt = 0;}
disadvantage: More conditions are included, so it is less efficient.

private void checkRep() its code should change, because new rep inv is included. Check if coeff
is NaN, whether the expt is 0.
disadvantage: More conditions included, not efficient.


4. Preferred Invariants
I think coeff.equals(RatNum.ZERO)->expt = 0 would be better. If we lose the checking ZERO part,
four methods have to change, and two of them have to make expt = 0 again. So it would convenient
to just set expt=0 at the constructor. And it is more intuitive. For NaN checking, it is easier.
At the beginning of almost all the methods, we will check NaN first, and treat NaN condition as
special cases. We will not mix NaN with terms that are not NaN, so expt of NaN really do not matter.




## Part 3
###########################################################################

1. Calls to checkRep in RatPoly



2. Alternate Representation



