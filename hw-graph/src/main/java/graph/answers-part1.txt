## CSE 331 hw-graph Part 1 Questions

## Section 1
###########################################################################

1. Write an AF and RI for IntQueue1 and IntQueue2.

    ### IntQueue1

    Abstraction Function:
    AF = a integer queue with entries where the front of the list corresponds to the front of the entries

    Representation Invariant:
    Each item in entries should not be null.

    ### IntQueue2

    Abstraction Function:
    AF(this) =
                entries[front..front+size-1]  if front+size<entries.length
                entries[front..]+entries[0..size-(entries.length-front)-1] o.w.

    Representation Invariant:
    0<=size<=entries.length && 0<=front<entries.length && each element in entries != null


2. Group the snapshots of IntQueue2's internal state into groups that have the same abstract state.
c = f
d = a = g
b = h


3. For each signature below, state and justify in 1-2 sentences (per part) whether the method or constructor
could possibly expose the representation, given the information available. Explain any assumptions you made.

    a. `public int solveEquations(int x, int y, int z)`
No, because the return type(int) is immutable, we cannot change its value after it is constructed.


    b. `public String[] decode(boolean slowly)`
If it's returning one of fields and the returned field is not final, then yes, because String[] is mutable.




    c. `private Date myBirthday()`
No, because the method is private, the clients cannot call this method.


    d. `public String toString()`
No, because String is immutable and usually the return string in toString method is not fields.


    e. `public Iterator<Integer> elements()`
If the returned Iterator changes values of mutable fields, then yes.




    f. `public Deck(List<Card> cards)`
No, it's not returning anything. It is just a constructor.



## Section 2
###########################################################################

Briefly explain why you included the operations you did and why you feel they are a sufficient
interface to a graph. If your design includes multiple classes or interfaces, explain why you
included each one; if not, explain whether you considered additional classes and why you decided
not to include them.
For people who design a map, they must need operations that can add/remove a location (node) and
a path (edge). They also want users to know whether a place is contained in the map or not, and
what places are in the map. If users are in one of the places, where they can go and how they go.
I did not add multiple classes because I plan to store node and edge in terms of lists.




## Section 3
###########################################################################

What was your testing strategy for this assignment? How do your script tests and JUnit tests
differ from each other (if they do), and why?



